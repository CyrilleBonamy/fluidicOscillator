/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  9                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     interFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         4;          // Simulation ends after 2 s

deltaT          1e-6;       // Initial time-step, will be modified by CFL

writeControl    adjustableRunTime;

writeInterval   0.005;

purgeWrite      0;

writeFormat     binary;     // Recommended to store in binary - no cutoff

writePrecision  6;

writeCompression false;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  on;

maxCo           0.3;        // Controls the time step based on CFL

maxAlphaCo      0.8;        // Additional time step control

maxDeltaT       0.0005;     // The maximal allowed time step

libs
(
    "libutilityFunctionObjects.so"
    "libsolverFunctionObjects.so"
);

functions
{
    S
    {
        //- Here we build an new transport equations such as:
        //  ddt(rho, S) + div(phi,S) + laplacian(D,S) == Q 
        //  The source term Q can be modelled with the fvOptions
        //  functionality. Attention to the units you specify.
        type            scalarTransport;
        writeControl    outputTime;

        //- Field name
        field           S;

        //- Schemes used -> system/fvSchemes
        schemesField    S;

        //- Either use auto schemes or manuell added schemes
        autoSchemes     true;

        //- Corrections
        nCorr           0;

        //- Diffusion coefficient, if not used muEff is used
        //D               0;

        //- Reset the field on start-up
        resetOnStartUp  false;

        //- Build a source term Q at different points (in this case)
        //  Highly flexible
        fvOptions       
        {
            source
            {
                type            scalarSemiImplicitSource;
                active          true;

                //- Add the source to the cells given in the cellZone
                selectionMode   cellZone;
                cellZone        c0;

                //- Take care of the specific vs absolute value
                volumeMode      specific;
                injectionRateSuSp
                {
                    //- Value 5 starting at time t = 0
                    S   (5 0);
                }
            }
        }
    }
    residuals
    {
        type                solverInfo;
        libs                (utilityFunctionObjects);
        writeResidualFields true;
        writeControl        writeTime;
        fields              
        (
            p_rgh
            U
        );
    }
}

// ************************************************************************* //
